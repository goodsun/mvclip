import ytdl from '@distube/ytdl-core';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export async function downloadVideo(url, options = {}) {
  try {
    // URLの検証
    if (!ytdl.validateURL(url)) {
      throw new Error('無効なYouTube URLです');
    }
    
    console.log('動画情報を取得中...');
    // 動画情報を取得（リトライ付き）
    const info = await ytdl.getInfo(url, {
      requestOptions: {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language': 'en-US,en;q=0.5',
          'Accept-Encoding': 'gzip, deflate',
          'DNT': '1',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1'
        }
      }
    });
    
    const videoTitle = info.videoDetails.title.replace(/[^a-zA-Z0-9あ-んア-ン一-龥]/g, '_');
    const videoId = info.videoDetails.videoId;
    
    // 保存パス
    const timestamp = Date.now();
    const filename = `${videoId}_${timestamp}.mp4`;
    const outputPath = path.join(__dirname, '../../temp', filename);
    
    // tempディレクトリを作成
    const tempDir = path.join(__dirname, '../../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // 利用可能なフォーマットを確認
    const formats = ytdl.filterFormats(info.formats, 'audioandvideo');
    if (formats.length === 0) {
      throw new Error('ダウンロード可能なフォーマットが見つかりません');
    }
    
    // 利用可能なフォーマットの詳細をログ出力
    console.log(`📋 利用可能なフォーマット数: ${formats.length}`);
    const topFormats = formats
      .sort((a, b) => (parseInt(b.height) || 0) - (parseInt(a.height) || 0))
      .slice(0, 5);
    
    console.log('🎥 上位フォーマット:');
    topFormats.forEach((format, i) => {
      console.log(`  ${i + 1}. ${format.height || 'N/A'}p, ${format.container || format.ext}, ${(parseInt(format.contentLength) / 1024 / 1024).toFixed(1)}MB`);
    });
    
    console.log('動画をダウンロード中...');
    
    // ytdlオプション設定（用途別最適化）
    let ytdlOptions = {
      filter: 'audioandvideo',
      requestOptions: {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language': 'en-US,en;q=0.5',
          'Accept-Encoding': 'gzip, deflate',
          'DNT': '1',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1'
        }
      }
    };
    
    // 動画編集用の場合、最高品質を強制取得
    if (options.purpose === 'editing') {
      console.log('🎬 動画編集用: 最高画質設定を適用');
      
      // 最高品質のフォーマットを手動選択
      const bestFormat = formats
        .filter(f => f.hasVideo && f.hasAudio)
        .sort((a, b) => {
          // 解像度を優先、次にビットレートを比較
          const heightDiff = (parseInt(b.height) || 0) - (parseInt(a.height) || 0);
          if (heightDiff !== 0) return heightDiff;
          return (parseInt(b.bitrate) || 0) - (parseInt(a.bitrate) || 0);
        })[0];
        
      if (bestFormat) {
        ytdlOptions.format = bestFormat.itag;
        console.log(`🏆 選択されたフォーマット: ${bestFormat.height}p, ${bestFormat.container}, itag=${bestFormat.itag}`);
      } else {
        // フォールバック: 複数の高品質オプションを試行
        ytdlOptions.quality = [
          'best[height>=1080]',
          'best[height>=720]', 
          'highestvideo+bestaudio',
          'highest'
        ];
        console.log('⚠️ 手動選択失敗、フォールバック品質設定を使用');
      }
    } else {
      // 字幕解析用は効率重視
      ytdlOptions.quality = 'highest';
    }
    
    // 用途をログ出力
    if (options.purpose) {
      console.log(`📹 ダウンロード用途: ${options.purpose === 'analysis' ? '字幕解析用' : '動画編集用'}`);
    }
    
    // 開始時間が指定されている場合（終了時間の指定は不可）
    if (options.startTime) {
      ytdlOptions.begin = options.startTime;
      console.log(`⏱️ 開始時間 ${options.startTime} からダウンロード`);
    }
    
    // 高品質の動画をダウンロード
    const stream = ytdl(url, ytdlOptions);
    
    const writeStream = fs.createWriteStream(outputPath);
    
    return new Promise((resolve, reject) => {
      stream.pipe(writeStream);
      
      stream.on('error', (error) => {
        console.error('ストリームエラー:', error);
        reject(error);
      });
      
      writeStream.on('finish', async () => {
        console.log(`ダウンロード完了: ${outputPath}`);
        
        // ダウンロードされたファイルの品質を確認
        try {
          const { exec } = await import('child_process');
          const { promisify } = await import('util');
          const execAsync = promisify(exec);
          
          const { stdout } = await execAsync(`ffprobe -v quiet -print_format json -show_streams "${outputPath}"`);
          const probe = JSON.parse(stdout);
          const videoStream = probe.streams.find(s => s.codec_type === 'video');
          
          if (videoStream) {
            console.log(`📊 ダウンロード品質確認:`);
            console.log(`   解像度: ${videoStream.width}x${videoStream.height}`);
            console.log(`   フレームレート: ${eval(videoStream.r_frame_rate || '0/1').toFixed(2)}fps`);
            console.log(`   コーデック: ${videoStream.codec_name}`);
            
            const fileSizeInMB = (require('fs').statSync(outputPath).size / 1024 / 1024).toFixed(1);
            console.log(`   ファイルサイズ: ${fileSizeInMB}MB`);
          }
        } catch (error) {
          console.log('⚠️ 品質確認に失敗:', error.message);
        }
        
        resolve({
          videoId,
          title: info.videoDetails.title,
          duration: info.videoDetails.lengthSeconds,
          filename,
          path: outputPath,
          url: info.videoDetails.video_url,
          timeRange: options.startTime || options.endTime ? {
            start: options.startTime || '0:00',
            end: options.endTime || info.videoDetails.lengthSeconds
          } : null
        });
      });
      
      writeStream.on('error', (error) => {
        console.error('ファイル書き込みエラー:', error);
        reject(error);
      });
    });
  } catch (error) {
    console.error('YouTubeダウンロードエラー:', error);
    throw new Error(`動画のダウンロードに失敗しました: ${error.message}`);
  }
}